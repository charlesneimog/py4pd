#N canvas 477 33 800 932 12;
#X obj 53 146 hsl 128 15 0 127 0 0 empty empty empty -2 -8 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 13 197 py4pd;
#N canvas 1022 602 627 287 modules 0;
#X obj 17 171 s py4pd;
#X msg 78 110 pip_install;
#X msg 17 15 set modules randint;
#X msg 38 47 run 1 4;
#X msg 70 80 doc;
#X text 234 20 In modules.py I just use the 'from random import *' Using that you will be able to use all python func- tions of diferrent modules inside PureData.;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X restore 129 289 pd modules;
#X msg 50 165 run \$1 10, f 10;
#X obj 50 121 random 100;
#N canvas 502 287 1263 548 coding 0;
#X obj 27 235 s py4pd;
#X msg 67 140 reload, f 8;
#X msg 94 178 create om, f 11;
#X msg 28 21 doc, f 6;
#X text 83 20 Shows the doc of the function!;
#X text 135 139 Reload the function \, if you change it you need to reload!;
#X text 184 173 If you want to create a new script \, you can run create \, if the files already exits it will not replace it \, just open it.;
#N canvas 0 50 450 250 (subpatch) 0;
#X text 0 0 plugdatainfo <?xml version="1.0" encoding="UTF-8"?> <PlugDataInfo/>;
#X coords 0 1 100 -1 1 1 1;
#X restore 0 0 graph;
#X msg 58 107 editor, f 8;
#X msg 38 51 editor nvim;
#X msg 47 77 editor vscode;
#X text 125 51 Set Nvim as py4pd editor.;
#X text 151 77 Set vscode as py4pd editor.;
#X text 128 106 Open editor if it is in the PATH!;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 8 0 0 0;
#X connect 9 0 0 0;
#X connect 10 0 0 0;
#X restore 12 334 pd coding;
#X msg 13 17 set py sum, f 12;
#X msg 25 46 doc, f 6;
#X obj 50 99 metro 100;
#N canvas 224 138 1628 723 embedded 0;
#X obj 9 142 py4pd;
#X msg 9 8 set py pd_output;
#X msg 67 80 run;
#X msg 107 81 reload;
#X msg 9 166 set \$1;
#X msg 9 190 9;
#X text 6 248 With this you can send values for pd without return \, this seems to be very useful for work with list of lists. And other things;
#X obj 8 219 print pd.out;
#X msg 22 32 set py pd_message;
#X msg 37 55 set py pd_error;
#X text 62 141 This is more a thing for Python coders.;
#X msg 368 68 run;
#N canvas 0 50 450 250 (subpatch) 0;
#X array test 83 float 3;
#A 0 0.41 0.38 0.85 -0.55 -0.75 -0.54 0.91 -0.95 0.58 -0.78 -0.6 -0.03 -0.92 -0.43 0.72 0.58 -0.42 0.73 0.23 0.25 0.09 0.15 0.19 0.7 0.55 -0.39 -0.86 -0.18 -0.82 -0.73 0.49 0.11 -0.01 -0.69 0.25 -0.26 -0.38 0.49 0.9 -0.13 0.91 -0.13 -0.12 0.8 -0.05 -0.98 0.64 -0.96 0.25 -0.82 -0.14 -0.33 0.58 -0.03 -0.18 -0.53 -0.73 -0.3 0.62 0.48 0.64 0.41 0.53 -0.73 0.71 0.66 -0.43 0.16 0.11 -0.66 -0.47 0.44 0.6 0.51 -0.87 -0.68 0.99 0.95 -0.13 0.31 -0.98 0.95 -0.93;
#X coords 0 1 83 -1 200 140 1;
#X restore 553 17 graph;
#X obj 368 19 tgl 20 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 368 124 run;
#X obj 368 176 print somepartsofarray;
#X obj 368 45 metro 100;
#X obj 368 151 py4pd py pd_tabread;
#X obj 368 90 py4pd py pd_tabwrite;
#X connect 0 0 4 0;
#X connect 0 0 7 0;
#X connect 1 0 0 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 5 0;
#X connect 8 0 0 0;
#X connect 9 0 0 0;
#X connect 11 0 18 0;
#X connect 13 0 16 0;
#X connect 14 0 17 0;
#X connect 16 0 11 0;
#X connect 17 0 15 0;
#X restore 128 312 pd embedded module;
#N canvas 0 50 450 250 (subpatch) 0;
#X text 0 0 plugdatainfo <?xml version="1.0" encoding="UTF-8"?> <PlugDataInfo/>;
#X coords 0 1 100 -1 1 1 1;
#X restore 0 0 graph;
#N canvas 881 301 934 596 Lists 0;
#X obj 17 128 py4pd;
#X text 17 280 1 Set the function thread_test \; 2 Then turn on the dsp and thread mode \; 3 It will just output the hour 5s after you press run \; For python scripts that need some time to execute \, the thread mode will allow do not stop the PD process to run. This means that py4pd will not interrupt the audio signal. Try to run the same function with the thread mode off. Wait 5 seconds! Pd do not stop to work \, just is wait the python script finish his work!;
#N canvas 0 50 450 250 (subpatch) 0;
#X text 0 0 plugdatainfo <?xml version="1.0" encoding="UTF-8"?> <PlugDataInfo/>;
#X coords 0 1 100 -1 1 1 1;
#X restore 0 0 graph;
#X obj 17 164 print thread-1;
#X msg 117 63 set py sumlist;
#X msg 17 70 runlist;
#X connect 0 0 3 0;
#X connect 4 0 0 0;
#X connect 5 0 0 0;
#X restore 12 288 pd Lists;
#X text 56 197 Here is the Object!;
#N canvas 881 301 934 596 Scores 0;
#N canvas 0 50 450 250 (subpatch) 0;
#X text 0 0 plugdatainfo <?xml version="1.0" encoding="UTF-8"?> <PlugDataInfo/>;
#X coords 0 1 100 -1 1 1 1;
#X restore 0 0 graph;
#X obj 13 106 py4pd -score score note;
#X msg 13 37 run [c4 c6];
#X msg 33 64 run [eb2 c3 c#4 bb4 c6];
#X text 142 101 You need to run: "pip install neoscore -t ./py-modules";
#X connect 2 0 1 0;
#X connect 3 0 1 0;
#X restore 12 311 pd Scores;
#X obj 50 72 tgl 20 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 13 222 print py4pd;
#X obj 245 19 py4pd -score;
#N canvas 435 131 1212 865 audioin 0;
#X msg 57 39 editor nvim;
#X msg 77 67 reload;
#X obj 30 7 cycle~ 330;
#X msg 152 63 numpy \$1;
#X obj 152 38 tgl 20 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X obj 30 159 list fromsymbol;
#X obj 30 187 unpack f;
#X obj 30 211 sel 110 108, f 44;
#X msg 464 161 \; pd dsp 1;
#X msg 463 201 \; pd dsp 0;
#X obj 182 235 int;
#X obj 182 260 + 1;
#X obj 182 310 sel 500;
#X obj 182 286 % 501;
#X obj 30 134 py4pd py pd_audio -audioin;
#X obj 182 361 print check-audioin;
#X obj 30 236 int;
#X obj 30 261 + 1;
#X obj 30 311 sel 500;
#X obj 30 287 % 501;
#X obj 30 362 print check-audioin;
#X msg 30 337 using numpy array;
#X msg 182 336 using list array - seems more slow;
#X connect 0 0 14 0;
#X connect 1 0 14 0;
#X connect 2 0 14 0;
#X connect 3 0 14 0;
#X connect 4 0 3 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 7 0 16 0;
#X connect 7 1 10 0;
#X connect 10 0 11 0;
#X connect 11 0 10 1;
#X connect 11 0 13 0;
#X connect 12 0 22 0;
#X connect 13 0 12 0;
#X connect 14 0 5 0;
#X connect 16 0 17 0;
#X connect 17 0 16 1;
#X connect 17 0 19 0;
#X connect 18 0 21 0;
#X connect 19 0 18 0;
#X connect 21 0 20 0;
#X connect 22 0 15 0;
#X restore 13 380 pd audioin;
#N canvas 944 235 769 663 audioout 0;
#X msg 111 41 editor nvim;
#X obj 30 238 dac~;
#X msg 95 11 set py pd_audioout;
#X obj 30 11 osc~ 330;
#X obj 30 151 py4pd py pd_audioout -audioout;
#X msg 234 75 numpy \$1;
#X obj 234 43 tgl 20 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 122 72 reload;
#X connect 0 0 4 0;
#X connect 2 0 4 0;
#X connect 3 0 4 0;
#X connect 4 0 1 0;
#X connect 4 0 1 1;
#X connect 5 0 4 0;
#X connect 6 0 5 0;
#X connect 7 0 4 0;
#X restore 13 403 pd audioout;
#X connect 0 0 3 0;
#X connect 1 0 15 0;
#X connect 3 0 1 0;
#X connect 4 0 0 0;
#X connect 6 0 1 0;
#X connect 7 0 1 0;
#X connect 8 0 4 0;
#X connect 14 0 8 0;
