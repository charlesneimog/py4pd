import puredata as pd
import threading
import os

import pip


class pypip(pd.NewObject):
    name: str = "py.pip"

    def __init__(self, args):
        self.inlets = 1
        self.outlets = 1
        self.installing = {}
        self.points = "..."
        self.counter = 0
        self.metro = self.new_clock(self.tick)
        self.py4pd_path = os.environ["PY4PD_PATH"]

    def tick(self):
        installing_packages = [pkg for pkg, status in self.installing.items() if status]
        if installing_packages:
            message = (
                "Installing "
                + ", ".join(installing_packages)
                + self.points[: self.counter + 1]
            )
            self.logpost(2, message)
            self.counter += 1
            self.counter %= 3
            self.metro.delay(1000)
        else:
            self.logpost(2, "Done")

    def in_1_pip(self, args):
        method = args[0]
        if method == "install":
            packages = args[1:]
            for package in packages:
                if package not in self.installing or not self.installing[package]:
                    self.installing[package] = True
                    def install_thread(pkg):
                        self.logpost(2, f"Starting installation of {pkg}")
                        try:
                            args = [
                                "install",
                                pkg,
                                "--target", f"{self.py4pd_path}/py4pd-env"
                            ]
                            self.logpost(2, f"Running pip with args: {args}")
                            ret = pip.main(args)
                            if ret != 0:
                                self.error(f"Error installing {pkg}")
                                self.installing[pkg] = False
                                return
                        except Exception as e:
                            self.error(f"Exception during install of {pkg}: {e}")
                            self.installing[pkg] = False
                            return
                        self.installing[pkg] = False

                    threading.Thread(target=install_thread, args=(package,)).start()
            self.metro.delay(500)

    def in_1_reload(self, args: list):
        self.reload()
        pd.post("Reloaded!")
