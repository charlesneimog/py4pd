{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p> Welcome to the <code>py4pd</code> documentation! </p> <p> </p>"},{"location":"#what-is-py4pd","title":"What is py4pd?","text":"<p><code>py4pd</code> bridges the capabilities of OpenMusic with the versatility of PureData. If you're familiar with OpenMusic and BachLibrary, you'll discover a fresh source of inspiration here.</p> <p>We achieve this by using Python instead of OpenMusic's Common Lisp, unlocking a vast array of powerful tools developed by composers and artists. This approach makes it easier to create music while seamlessly integrating extra code when needed.</p>"},{"location":"#puredata-user","title":"PureData User","text":"<ul> <li> <p> Algorithm Composition </p> <p> List</p> </li> <li> <p> <code>py4pd</code> Libraries</p> <p> Libraries</p> </li> </ul>"},{"location":"#python-user","title":"Python User","text":"<ul> <li> <p> Hello World </p> <p> Hello World with <code>py4pd</code></p> </li> <li> <p> Creating Libraries</p> <p> Creating Pd Object with Python</p> </li> </ul> <p>How to install?</p> <p>To check how to install go to Installation.</p>"},{"location":"#examples-and-use-cases","title":"Examples and Use Cases","text":"<p>Here are presented tools implemented with <code>py4pd</code>. Users are encouraged to contribute their examples through Github .</p> AI TrainingArtificial Inteligence <p>With <code>py4pd</code>, you can train an AI using Pd, an share ways to train with composers, students, and others.</p> <p> </p> <p>It is easy to use <code>AI</code> with <code>py4pd</code>. There are already powerful objects for real-time, like <code>nn~</code> and <code>ddsp~</code>, but they are designed to specify approaches. Below is an example using <code>py4pd</code> and the Python code used by <code>nn~</code> (offline processing).</p> <p><p> </p></p> <p><p>          Your browser does not support the audio element.      </p></p> Python Code <p>To illustrate the statement \"Python offers a more accessible and user-friendly alternative than C and C++\", presented earlier, here is an example of Python code:</p> <pre><code>import pd # py4pd library\nimport torch # Library of AI\nimport librosa # Library to load audios in Python\n\ndef renderAudio_nn(audio, model):\n    model = pd.get_patch_dir() + '/' + model # get the pathname of model.ts, which is the result of the IA trained.\n    audio = pd.get_patch_dir() + '/' +  audio # The audio source\n    torch.set_grad_enabled(False) # config of the IA\n    model = torch.jit.load(model).eval() # Load model of IA\n    x = librosa.load(audio)[0] # take the audio samples of the sound (audio)\n    x_for = torch.from_numpy(x).reshape(1, 1, -1) # transform the audio to fit in the IA model\n    z = model.encode(x_for) # the black box\n    z[:, 0] += torch.linspace(-2, 2, z.shape[-1]) # No idea;\n    y = model.decode(z).numpy().reshape(-1) # Now we have sound again!\n    pd.tabwrite('iaAudio', y.tolist(), resize=True) # Here we write the sound in the table 'iaAudio'.\n    pd.print('Audio rendered')\n</code></pre>"},{"location":"#pieces-where-i-use-it","title":"Pieces where I use it","text":"Ideias Roubadas (2024)Eco (2023)Moteto (2023) <p>Ideias Roubadas III is a work inspired by the proposal of the UPIC system, developed by Iannis Xenakis in collaboration with the Centre d'Etudes de Math\u00e9matique et Automatique Musicales (CEMAMu) in Paris. Like UPIC, this piece employs an approach that manipulates visual elements to generate music using PureData to render the audio. I employ the concept of instruments (inspired by Csound) to render the sounds. Each color represents a sound or a set of instructions for spacialization, envelope, and others. <p> </p></p> <p>Eco (2023) is the first version of one under-developing piece that uses some concepts of the composer Ricardo Thomasi in his PhD research. The idea here is to use smartphones/tablets put in the performance music stand, to make real-time <code>FFT</code> and <code>Partial Tracking</code> and then, generate scores that are played. The smartphones/tablets send data to PureData, and using <code>py4pd</code>, we generate real-time scores using <code>neoscore</code>.</p> <p><p> </p></p> <p>The piece Moteto aims to be a rereading of a medieval motet. In addition, to overlapping independent voices, we use Just Intonation structures. With the help of technology, I aim to make the piece playable, also by amateur choirs, it is available on this website: www.charlesneimog.com/moteto/. <p> </p></p>"},{"location":"hello/","title":"Hello World","text":""},{"location":"hello/#creating-a-py4pd-object","title":"Creating a <code>py4pd</code> Object","text":"<p>To define a new <code>py4pd</code> object, create a subclass of <code>puredata.NewObject</code>, name the object, and finally name the script with the name + <code>.pd_py</code>. For example, <code>pymetro.pd_py</code> for the object <code>pymetro</code>. Place the file in a place where Pd can find it. </p> <p>Don't forget to load <code>py4pd</code> first</p>"},{"location":"hello/#example","title":"Example","text":"<pre><code>import puredata as pd\n\nclass pymetro(pd.NewObject):\n    name: str = \"pymetro\"  # Name of the Pure Data object\n\n    def __init__(self, args):\n        self.inlets = 2    # Number of inlets\n        self.outlets = 1   # Number of outlets\n</code></pre>"},{"location":"hello/#key-points","title":"Key Points","text":"<p>The Python class name (e.g., <code>pymetro</code>) can be any valid class name. The name attribute determines the name of the object inside Pure Data. <code>self.inlets</code> and <code>self.outlets</code> define the number of inlets and outlets for the object. When loading this object in Pure Data, use the name attribute value (<code>pymetro</code> in this example) as the object name.</p>"},{"location":"hello/#input-and-output","title":"Input and Output","text":""},{"location":"hello/#input","title":"Input","text":"<p>The input design is inspired by the mature <code>pd-lua</code> project. For methods, use the format <code>in_&lt;inlet_number&gt;_&lt;method&gt;</code>. For example, to execute code when a <code>float</code> is received on inlet 1, define a method called <code>in_1_float</code>. Pd provides predefined methods that do not require a custom selector: <code>bang</code>, <code>float</code>, <code>symbol</code>, <code>list</code>, and <code>anything</code>. You can also create custom selectors (prefixes); for instance, <code>in_1_mymethod</code> will be executed when the message <code>mymethod</code> is sent to inlet 1 of the object.</p>"},{"location":"hello/#output","title":"Output","text":"<p>To produce output, use the method <code>self.out</code>. For example, <code>self.out(0, pd.SYMBOL, \"test238\")</code> sends the symbol <code>\"test238\"</code> to outlet 0. The second argument specifies the data type, which can be <code>pd.SYMBOL</code> or <code>pd.FLOAT</code>. To output a list, use <code>pd.LIST</code> instead. To output <code>numpy.ndarray</code>, <code>class</code> and others you must use <code>pd.PYOBJECT</code>.</p> <p><code>py4pd</code> also implements the <code>PyObject</code> message, which allows you to share Python data types between <code>py4pd</code> objects. This enables the transfer of class instances, NumPy arrays, and other Python objects that are not supported by Pure Data\u2019s traditional data types.</p>"},{"location":"hello/#metronome-example","title":"Metronome Example","text":"<pre><code>import puredata as pd\n\n\nclass pymetro(pd.NewObject):\n    name: str = \"pymetro\"\n\n    def __init__(self, args):\n        self.inlets = 2\n        self.outlets = 1\n        self.toggle = False\n        if len(args) &gt; 0:\n            self.time = float(args[0])\n        else:\n            self.time = 1000\n        self.metro = pd.new_clock(self, self.tick)\n        self.args = args\n\n    def in_2_float(self, f: float):\n        self.time = f\n\n    def in_1_float(self, f: float):\n        if f:\n            self.toggle = True\n            self.tick()\n        else:\n            self.metro.unset()\n            self.toggle = False\n\n    def in_1_reload(self, args: list):\n        self.reload()\n\n    def tick(self):\n        if self.toggle:\n            self.metro.delay(self.time)\n        self.out(0, pd.SYMBOL, \"test238\")\n</code></pre>"},{"location":"libraries/","title":"External Libraries","text":"<p>In this page I list all the libraries with <code>py4pd</code> that I know. This, someday, hopefully, will be something like OpenMusic Libraries section OpenMusic Libraries.</p> <p>Check <code>py4pd</code> installation process here.</p>"},{"location":"libraries/#list-of-libraries","title":"List of Libraries","text":"<p>I am updating <code>py4pd</code>, please wait for this section to be updated.</p>"},{"location":"newobject/","title":"<code>NewObject</code> Class","text":"<p>All <code>py4pd</code> object classes are created from the base class <code>puredata.NewObject</code>. </p> <pre><code>import puredata as pd\n\nclass pymetro(pd.NewObject):\n    name: str = \"pymetro\" # object name, must be exactly the same as the file name (pymetro.pd_py)\n\n    def __init__(self, args):\n        # Object initializer\n        pass\n</code></pre>"},{"location":"openmusic/","title":"Algorithm Composition","text":"<p><code>py4pd</code> offers a list of objects to create algorithm composition, they mimic some obcjets of OpenMusic.</p> <p>I am yet implementing most of OpenMusic objects</p>"},{"location":"openmusic/#visual-language","title":"Visual Language","text":""},{"location":"openmusic/#lisp","title":"Lisp","text":"<p>Basic functions defined in the programming language</p> <ul> <li><code>py.first</code>: Returns the first element of a list.</li> <li><code>py.second</code>: Returns the second element of a list.</li> <li><code>py.third</code>: Returns the third element of a list.</li> <li><code>py.nth</code>: Returns the element at a specified index in a list.</li> <li><code>py.rest</code>: Returns all elements of a list except the first.</li> <li><code>py.nthcdr</code>: Returns all elements of a list starting from a specified index.</li> <li><code>py.butlast</code>: Returns all elements of a list except the last.</li> <li><code>py.reverse</code>: Returns a new list with elements in reverse order.</li> <li><code>py.length</code>: Returns the number of elements in a list.</li> <li><code>py.list</code>: Converts arguments into a list.</li> <li><code>py.remove</code>: Returns a list with all occurrences of a given element removed.</li> <li><code>py.cons</code>: Constructs a new list by prepending an element to an existing list.</li> <li><code>py.append</code>: Concatenates two lists into a single list.</li> <li><code>py.apply</code>: Calls a function with a list of arguments.</li> <li><code>py.funcall</code>: Calls a function with given arguments directly.</li> <li><code>py.mapcar</code>: Applies a function to each element of a list and returns a list of results.</li> <li><code>py.mapcan</code>: Applies a function to each element of a list and concatenates all results into a single list.</li> </ul>"},{"location":"openmusic/#control","title":"Control","text":"<p>Special boxes implementing control operators, argument passing and memory</p> <ul> <li><code>py.seq</code>:</li> <li><code>py.hub</code>:</li> <li><code>py.split</code>:</li> <li><code>py.default</code>:</li> </ul>"},{"location":"openmusic/#loop","title":"Loop","text":"<p>Special boxes for visual loop implementation</p> <p>Special symbols:</p> <ul> <li><code>py.iterate</code>: Iterate over a list.</li> <li><code>py.collect</code>: Collect items. Must work with <code>py.iterate</code>.</li> </ul>"},{"location":"openmusic/#basic-tools","title":"Basic Tools","text":"<p>Objects and tools for data representation and processing</p>"},{"location":"openmusic/#arithmetic","title":"Arithmetic","text":"<ul> <li><code>py.+</code>: + lists, number and list with number.</li> <li><code>py.-</code>: - lists, number and list with number.</li> <li><code>py.*</code>: * lists, number and list with number.</li> <li><code>py./</code>: / lists, number and list with number.</li> </ul>"},{"location":"pdmodule/","title":"Creating Objects","text":"<p>As shown in the Hello World section, to create a new <code>py4pd</code> object you must use the subclass <code>puredata.NewObject</code>, define the object\u2019s name, and save it in a folder using the pattern <code>&lt;object_name&gt;.pd_py</code>. To enable object creation, you must always import the <code>puredata</code> module, which is only available when the script <code>.pd_py</code> is loaded via <code>py4pd</code>.</p>"},{"location":"pdmodule/#newobject-class","title":"<code>NewObject</code> Class","text":"<p>All PureData Python objects are created as subclasses from the base class <code>puredata.NewObject</code>. </p> <pre><code>import puredata as pd\n\nclass pymetro(pd.NewObject):\n    name: str = \"pymetro\" # object name, must be exactly the same as the file name without extension (pymetro.pd_py)\n\n    def __init__(self, args):\n        # Object initializer\n        pass\n</code></pre>"},{"location":"pdmodule/#object-attributes","title":"Object Attributes","text":"<p>From the class initializer (<code>__init__</code>), you need to define some object attributes. Like <code>self.inlets</code>, <code>self.outlets</code> and options attributes (like <code>clocks</code>, <code>receivers</code>, etc).</p> <ul> <li> <p><code>self.inlets</code>: Can be an <code>integer</code> (number of inlets) or a <code>Tuple</code> specifying inlet types (<code>puredata.SIGNAL</code> or <code>puredata.DATA</code>), where each element in the tuple defines the type of the inlet at the corresponding index.</p> </li> <li> <p><code>self.outlets</code>: Can be an <code>integer</code> (number of outlets) or a <code>Tuple</code> specifying outlet types (<code>puredata.SIGNAL</code> or <code>puredata.DATA</code>), where each element in the tuple defines the type of the outlet at the corresponding index.</p> </li> </ul>"},{"location":"pdmodule/#pdnewobject-methods","title":"<code>pd.NewObject</code> Methods","text":"<ul> <li><code>self.logpost</code>: Post things on Pd console, <code>self,logpost(0, \"This is a fatal error\")</code> <code>self.logpost(1, \"This is an error\")</code>, <code>self.logpost(2, \"This normal a log\")</code>, <code>self.logpost(3, \"This is a debug\")</code>.</li> <li><code>self.error</code>: Print error, same as <code>self.logpost</code> with error level 1.</li> <li><code>self.out</code>: Output data to the object. <code>self.out(0, pd.FLOAT, 1)</code>, <code>self.out(0, pd.SYMBOL, \"hello\")</code>. <code>self.out(0, pd.PYOBJECT, [[1,2,3][4,5,6]])</code>. </li> <li><code>self.tabwrite</code>: Write <code>Tuple</code> of numbers in the <code>pd</code> array.</li> <li><code>self.tabread</code>: Read table from <code>pd</code>, returns a tuple.</li> <li><code>self.reload</code>: Reload the object.</li> </ul>"},{"location":"pdmodule/#clocks","title":"Clocks","text":"<pre><code>class pymetro(pd.NewObject):\n    name: str = \"pymetro\"\n\n    def __init__(self, args):\n        self.inlets = 2\n        self.outlets = 1\n        self.metro = pd.new_clock(self, self.tick)\n</code></pre>"},{"location":"pdmodule/#pdnew_clock","title":"<code>pd.new_clock</code>","text":"<p><code>Clock</code> can be created using the <code>pd.new_clock</code> method, which returns a <code>puredata.Clock</code> object. <code>new_clock</code> accepts the <code>self</code> of the class and a function as an argument, which will be executed when the clock ticks. In the above example, <code>self.metro</code> will have the methods: </p> <ul> <li><code>self.metro.delay</code>: Set a delay in milliseconds to execute function (in this case, <code>self.tick</code>).</li> </ul>"},{"location":"pdmodule/#receivers","title":"Receivers","text":"<p>class pyreceiver(pd.NewObject):     name: str = \"pyreceiver\"</p> <pre><code>def __init__(self, args):\n    self.inlets = 2\n    self.outlets = 1\n    self.receiver = pd.new_receiver(self, \"pyreceiver\", self.received)\n</code></pre> <ul> <li><code>self.receiver.unbind()</code> = This make the object not receive messages from the symbol <code>pyreceiver</code>.</li> <li><code>self.receiver.bind()</code> = This make the object receive messages from the symbol <code>pyreceiver</code>.</li> </ul>"},{"location":"pdmodule/#extra-puredata-methods","title":"Extra <code>puredata</code> Methods","text":"<ul> <li><code>pd.post</code>: Post a message to Pd without being possible to detect the object (for example, for credits in objects), or warnings when some package is not installed.</li> <li><code>pd.hasgui</code>: Returns if Pd has a GUI interface.</li> <li><code>pd.get_sample_rate</code>: Return sample rate of Pd.</li> </ul>"},{"location":"pdmodule/#complet-examples","title":"Complet Examples","text":"<p>Here some examples of objects:</p>"},{"location":"pdmodule/#tradicional-objects","title":"Tradicional Objects","text":"<pre><code>import puredata as pd\n\n\nclass pymetro(pd.NewObject):\n    name: str = \"pymetro\"\n\n    def __init__(self, args):\n        self.inlets = 2\n        self.outlets = 1\n        self.toggle = False\n        if len(args) &gt; 0:\n            self.time = float(args[0])\n        else:\n            self.time = 1000\n        self.metro = pd.new_clock(self, self.tick)\n        self.args = args\n\n    def in_2_float(self, f: float):\n        self.time = f\n\n    def in_1_float(self, f: float):\n        if f:\n            self.toggle = True\n            self.tick()\n        else:\n            self.metro.unset()\n            self.toggle = False\n\n    def in_1_reload(self, args: list):\n        self.reload()\n\n    def tick(self):\n        if self.toggle:\n            self.metro.delay(self.time)\n        self.out(0, pd.SYMBOL, \"test238\")\n</code></pre>"},{"location":"pdmodule/#python-data-types-on-pd","title":"Python Data Types on Pd","text":"<p>One of the great things that made me start <code>py4pd</code> was that I missed some data types. With <code>py4pd</code>, you can use any datatype supported by Python. This includes:</p> <ul> <li>Numeric types: <code>int</code>, <code>float</code>, <code>complex</code></li> <li>Sequence types: <code>list</code>, <code>tuple</code>, <code>range</code></li> <li>Text type: <code>str</code></li> <li>Set types: <code>set</code>, <code>frozenset</code></li> <li>Mapping type: <code>dict</code></li> <li>Boolean type: <code>bool</code></li> <li>Binary types: <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></li> </ul> <p>This flexibility allows you to integrate Python data structures directly into your Pd patches, making data manipulation and processing much easier and more powerful.</p> <p>To use it, you must convert the Pd data to Python using <code>py.2py</code> or use the <code>pd.PYOBJECT</code> type when using <code>self.out</code> method.</p>"},{"location":"pdmodule/#heres-a-completed-section-including-your-example-with-a-concise-explanation","title":"Here\u2019s a completed section including your example with a concise explanation:","text":""},{"location":"pdmodule/#audio-objects","title":"Audio Objects","text":"<p>With <code>py4pd</code>, you can create custom audio objects (tilde objects, like <code>osc~</code>) entirely in Python. This allows you to define signal processing logic directly in Python, while Pd handles the audio routing.</p> <p>Example:</p> <pre><code>import puredata as pd\nimport math\n\nclass pytest_tilde(pd.NewObject):\n    name: str = \"pytest~\"\n\n    def __init__(self, args):\n        self.inlets = pd.SIGNAL\n        self.outlets = pd.SIGNAL\n        self.phase = 0\n\n    def perform(self, input):\n        # this is executed in each block of audio\n        blocksize = self.blocksize\n        samplerate = self.samplerate\n\n        out_buffer = []\n        for i in range(blocksize):\n            phase_increment = 2 * math.pi * input[0][i] / samplerate\n            sample = math.sin(self.phase)\n            out_buffer.append(sample)\n            self.phase += phase_increment\n            if self.phase &gt; 2 * math.pi:\n                self.phase -= 2 * math.pi\n        return tuple(out_buffer)\n\n    def dsp(self, sr, blocksize, inchans):\n        # this is executed when you turn on the audio\n        self.samplerate = sr\n        self.blocksize = blocksize\n        self.inchans = inchans\n        return True\n</code></pre>"},{"location":"setup-libs/","title":"Setup libs","text":"<p>After creating objects with <code>py4pd</code>, you can add them to a library and install it using <code>pip</code> or the <code>py.pip</code> interface provided by <code>py4pd</code>. The process is straightforward: create a new GitHub repository and include a <code>pyproject.toml</code> file. This will make the library accessible within <code>py4pd</code>. Below is a simple example:</p> <pre><code>[project]\nname = \"py4pd-upic\"\nversion = \"0.1.0\"\ndescription = \"Description.\"\ndependencies = [\n    \"svgpathtools\",\n]\n\n[project.urls]\n\"Source Code\" = \"https://github.com/username/package\" \n\n[tool.setuptools]\npackages = [\"mypackage\"]  # Name of the package to be imported\n\n# to use subfolders\n#\"mypackage\" = [\"*\", \"othersfiles/*\"]  \n</code></pre> <p>TODO: Needs updates</p>"},{"location":"setup/","title":"First Install <code>Python</code>","text":"<p>Always check if the Python version you install is the right one!</p>  macOS Windows Linux <p>On <code>MacOS</code> you can install Python as an ordinary software.</p> <ul> <li>Go to Python.org,</li> <li>Go to the bottom of the page and download: <code>macOS 64-bit universal2 installer</code>.</li> <li>Install it as an ordinary program.</li> </ul> <p>On <code>Windows</code> you can install Python as an ordinary software.</p> <ul> <li>Go to Python.org,</li> <li>Go to the bottom of the page and download: <code>Windows installer (64-bit)</code>.</li> <li>Install it as an ordinary program.</li> </ul> <p>Be careful of conflicts with numpy installed on the system</p> <p>Sometimes, if numpy is already installed on your system (with the same version), <code>py4pd</code> may not work. This is a known limitation, and I haven't found a solution for it yet besides uninstall numpy from the system. Be carefull.</p> <p>On <code>Linux</code>:</p> <ul> <li>Open the terminal.</li> <li>Run:<ul> <li> <code>sudo dnf install python3.12 python3-pip</code></li> <li> <code>sudo apt install python3.12 python3-pip</code></li> <li> <code>sudo yay -S python312 python3.pip</code></li> </ul> </li> </ul>"},{"location":"setup/#after-install-py4pd","title":"After Install <code>py4pd</code>","text":"<ol> <li>Open PureData,</li> <li>Go to <code>Help-&gt;Find Externals-&gt;</code>,</li> <li>Search for <code>py4pd</code>,</li> <li>Select py4pd and click on <code>Install</code>:</li> </ol> Process of install py4pd on PureData"},{"location":"setup/#extra-info","title":"Extra Info","text":"<p>To use <code>py4pd</code>, besides PureData, you always need to install Python and the package <code>py4pd</code>. I recommend to install Python first then the <code>py4pd</code> package.</p> <p>Warning</p> <p>Always use the right version of Python as showed in the table.</p> <p> Py4pd Version Python Version <code>1.0.0</code> Python 3.13 <code>0.9.0</code> Python 3.12 <code>0.8.0</code> Python 3.11 </p>"}]}